snippet mpl "Import matplotlib with agg"
import matplotlib as mpl
mpl.use('agg')
from matplotlib import pyplot as plt
endsnippet

snippet future "Future imports"
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
endsnippet

snippet main "Main function"
def main():
	pass

if __name__ == '__main__':
	main()
endsnippet

snippet app "Main based on plumbum Application"
from plumbum import cli


class ${1:App}(cli.Application):
	${0:args}

	def main(self):
		pass


if __name__ == '__main__':
	$1().run()
endsnippet

snippet cliflag "Application flag"
${1:name} = cli.Flag(['--${2:flag name}'], help='${3:Description}')
endsnippet

snippet cliswitch "Application switch attribute"
${1:name} = cli.SwitchAttr(
	['--${2:flag name}'],
	mandatory=True,
	argtype=str,
	default=None,
	help='${3:Description}')
endsnippet

snippet cliset "Set type for Application switch"
Set('${1:first}'${2:, 'second'}, case_sensitive=False)
endsnippet

snippet cl "Class"
class ${1:name}(object):
	def __init__(self):
		pass
	
	${0}
endsnippet

snippet imshow "Show an image with matplotlib"
import matplotlib.pyplot as plt
plt.imshow(${1:image}, cmap='jet')
plt.colorbar()
plt.show()
endsnippet

snippet argparse "Setup for an ArgumentParser"
import argparse
parser = argparse.ArgumentParser()
${1:arguments}
args = parser.parse_args()
endsnippet

snippet barg "Boolean argparse flag"
parser.add_argument(
	'--${1:name}', action='store_true', help='${2}')
endsnippet

snippet sarg "String argparse flag"
parser.add_argument(
	'--${1:name}', default=None, required=True, help='${2}')
endsnippet

snippet earg "Enum argparse flag"
parser.add_argument(
	'--${1:name}', default=None, choices=[${2}], required=True, help='${3}')
endsnippet

snippet break "Set a breakpoint"
import pdb
pdb.set_trace()
endsnippet

snippet ri "Raw input"
raw_input('${1:...}')
${0}
endsnippet

snippet tempdir "Create and/or cleanup temporary directory"
import tempfile
temp_dir = tempfile.mkdtemp()

# ...

import shutil
shutil.rmtree(temp_dir)
endsnippet

snippet abc "Abstract base class pattern"
import abc


class Something(object):
	__metaclass__ = abc.ABCMeta

	@abc.abstractmethod
	def do_thing(self):
		pass
endsnippet

snippet zero_safe "Context for zero-safe operations (e.g., division, log)"
with np.errstate(divide='ignore', invalid='ignore'):
	${1:result} = ${2:expr}
	$1[~np.isfinite($1)] = 0
$0
endsnippet


snippet tftest "TensorFlow unit test"
import tensorflow as tf

class ${1:TestClass}(tf.test.TestCase):
	def setUp(self):
		super($1, self).setUp()

	def test_something(self):
		pass
endsnippet
