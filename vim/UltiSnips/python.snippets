snippet mpl "Import matplotlib with agg"
import matplotlib as mpl
mpl.use('agg')  # Or 'TkAgg' for on screen.
from matplotlib import pyplot as plt
endsnippet

snippet future "Future imports"
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
endsnippet

snippet main "Main function"
import argparse


def parse_args():
	parser = argparse.ArgumentParser()
	${1:arguments}
	return parser.parse_args()


def main():
	args = parse_args()

	${0}


if __name__ == '__main__':
	main()
endsnippet

snippet app "Main based on plumbum Application"
from plumbum import cli


class ${1:App}(cli.Application):
	${0:args}

	def main(self):
		pass


if __name__ == '__main__':
	$1().run()
endsnippet

snippet cliflag "Application flag"
${1:name} = cli.Flag(['--${2:flag name}'], help='${3:Description}')
endsnippet

snippet cliswitch "Application switch attribute"
${1:name} = cli.SwitchAttr(
	['--${2:flag name}'],
	mandatory=True,
	argtype=str,
	default=None,
	help='${3:Description}')
endsnippet

snippet cliset "Set type for Application switch"
Set('${1:first}'${2:, 'second'}, case_sensitive=False)
endsnippet

snippet cl "Class"
class ${1:name}(object):
	def __init__(self):
		pass
	
	${0}
endsnippet

snippet imshow "Show an image with matplotlib"
import matplotlib.pyplot as plt
plt.imshow(${1:image}, cmap='jet')
plt.colorbar()
plt.show()
endsnippet

snippet argparse "Setup for an ArgumentParser"
def parse_args():
	import argparse

	parser = argparse.ArgumentParser()
	${1:arguments}

	return parser.parse_args()
endsnippet

snippet barg "Boolean argparse flag"
parser.add_argument(
	'--${1:name}', action='store_true', help='${2}')
endsnippet

snippet sarg "String argparse flag"
parser.add_argument(
	'--${1:name}', default=None, required=True, help='${2}')
endsnippet

snippet earg "Enum argparse flag"
parser.add_argument(
	'--${1:name}', default=None, choices=[${2}], required=True, help='${3}')
endsnippet

snippet break "Set a breakpoint"
import ipdb as pdb
pdb.set_trace(context=5)
endsnippet

snippet ri "Raw input"
raw_input('${1:...}')
${0}
endsnippet

snippet tempdir "Create and/or cleanup temporary directory"
import tempfile
temp_dir = tempfile.mkdtemp()

# ...

import shutil
shutil.rmtree(temp_dir)
endsnippet

snippet abc "Abstract base class pattern"
import abc


class Something(object):
	__metaclass__ = abc.ABCMeta

	@abc.abstractmethod
	def do_thing(self):
		pass
endsnippet

snippet zero_safe "Context for zero-safe operations (e.g., division, log)"
with np.errstate(divide='ignore', invalid='ignore'):
	${1:result} = ${2:expr}
	$1[~np.isfinite($1)] = 0
$0
endsnippet


snippet tftest "TensorFlow unit test"
import tensorflow as tf

class ${1:TestClass}(tf.test.TestCase):
	def setUp(self):
		super($1, self).setUp()

	def test_something(self):
		pass
endsnippet

snippet tfdebug "TensorFlow debugger"
from tensorflow.python import debug as tf_debug

sess = tf_debug.LocalCLIDebugWrapperSession(sess)
endsnippet

snippet logger "Simple logger setup"
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
endsnippet

snippet timestamp "Timestamp string"
from datetime import datetime
timestamp = datetime.now().isoformat()
endsnippet

snippet exit "Exit process"
raise SystemExit()
endsnippet

snippet todo "Personal TODO"
# TODO(dlsmith): ${0}
endsnippet

snippet fixme "Personal FIXME"
# FIXME(dlsmith): ${0}
endsnippet

snippet fstub "Function stub"
def ${1:fn}(${2:args}):
	raise NotImplementedError()
${0}
endsnippet

snippet mkdirp "Helper function for mkdir -p"
from os import path as osp
import os

def makedirs(d):
	if not osp.isdir(d):
		os.makedirs(d)
	return d
endsnippet

snippet profile "Simple context manager to profile a block of code"
import contextlib

@contextlib.contextmanager
def profile(desc, fmt='{:.2f}'):
	start_s = time.time()
	yield
	print(desc, '...', fmt.format(time.time() - start_s), 's')
${0}
endsnippet

snippet hash "Hash a string"
import hashlib
hashlib.md5(value.encode('utf-8')).hexdigest()
endsnippet

snippet timer "Timer as a context manager"
import contextlib
import time
@contextlib.contextmanager
def timed(desc):
	start = time.time()
	print('{}...  '.format(desc), end='')
	yield
	elapsed = time.time() - start
	print('{:.2f} ms'.format(elapsed * 1000))
endsnippet
